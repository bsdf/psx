// generated by Fast Light User Interface Designer (fluid) version 1.0110

#ifndef FreeEditUI_h
#define FreeEditUI_h
#include <FL/Fl.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include <FL/fl_draw.H>
#include <FL/Fl_Value_Input.H>
#include <FL/fl_ask.H>
#include "Control.h"
#include "FreeEdit.h"
#include <FL/Fl_Group.H>

class FreeEditUI : public Fl_Box {
public:
  FreeEditUI(int x,int y, int w, int h, const char *label=0);
  ~FreeEditUI();
  void init(FreeEdit *free_edit_,Control *control_);
  void init_value_io(Fl_Value_Input *value_fl_,Fl_Value_Input *position_fl_,Fl_Value_Input *min_value_fl_,Fl_Value_Input *max_value_fl_);
  Fl_Color get_color(Fl_Color c);
  void draw();
  int handle(int event);
  void refresh_value();
  void set_selected_value(float val);
  void set_selected_position(float pos);
  void set_min_value(float val);
  void set_max_value(float val);
  void unselect();
  void set_smooth(float smooth);
  void set_interp_mode(int interp_mode);
  void clear();
  void update_curve();
  int current_point,selected_point; 
  Fl_Value_Input *value_fl,*position_fl,*min_value_fl,*max_value_fl; 
  FreeEdit *free_edit; 
  float default_value; 
  Control *control; 
};
#include <FL/Fl_Group.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Roller.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Light_Button.H>

class FreeEditControls : public Fl_Group {
public:
  FreeEditControls(int x,int y, int w, int h, const char *label=0);
  ~FreeEditControls();
  void init(FreeEditUI *free_edit_ui_,FREE_EDIT_EXTREME_SCALE scale_x=FE_LINEAR,float min_x=0.0,float max_x=1.0,FREE_EDIT_EXTREME_SCALE scale_val=FE_LINEAR,float min_val=0.0,float max_val=1.0,float default_value=1.0);
  void update_parameters();
  Fl_Group* make_window();
  Fl_Group *feui;
  Fl_Value_Input *free_edit_min_value_fl;
private:
  void cb_free_edit_min_value_fl_i(Fl_Value_Input*, void*);
  static void cb_free_edit_min_value_fl(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *free_edit_max_value_fl;
private:
  void cb_free_edit_max_value_fl_i(Fl_Value_Input*, void*);
  static void cb_free_edit_max_value_fl(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *free_edit_value_fl;
private:
  void cb_free_edit_value_fl_i(Fl_Value_Input*, void*);
  static void cb_free_edit_value_fl(Fl_Value_Input*, void*);
public:
  Fl_Roller *free_edit_smooth;
private:
  void cb_free_edit_smooth_i(Fl_Roller*, void*);
  static void cb_free_edit_smooth(Fl_Roller*, void*);
public:
  Fl_Choice *free_edit_interpolate;
private:
  void cb_free_edit_interpolate_i(Fl_Choice*, void*);
  static void cb_free_edit_interpolate(Fl_Choice*, void*);
  static Fl_Menu_Item menu_free_edit_interpolate[];
  void cb_clear_i(Fl_Button*, void*);
  static void cb_clear(Fl_Button*, void*);
public:
  Fl_Light_Button *enabled_check;
private:
  void cb_enabled_check_i(Fl_Light_Button*, void*);
  static void cb_enabled_check(Fl_Light_Button*, void*);
public:
  Fl_Value_Input *free_edit_position_fl;
private:
  void cb_free_edit_position_fl_i(Fl_Value_Input*, void*);
  static void cb_free_edit_position_fl(Fl_Value_Input*, void*);
public:
  void refresh();
private:
  FreeEditUI *free_edit_ui; 
};
#endif
